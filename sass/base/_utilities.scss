/*Utility classes are meant to do only one thing, and do it well. They are designed to be simple,
 composable and re-usable, allowing for easy and fast development. While a CSS system based on utility 
 classes alone is not desirable, having a set of utility classes that allow you to quickly put together 
 templates is great.

 https://blog.mariano.io/css-utility-classes-how-to-use-them-effectively-d61ee00dad2d
 
Common Use Cases
*I find utility classes really helpful for:
*Margin/padding
*Text (colors, size, styles)
*Common Background Colors
*Hiding/Showing stuff
*Display (block, inline-block)

Naming utility classes
To separate utility classes from component classes, itâ€™s good to namespace them. I use the .u- namespace.
You can also shorthand most properties for faster coding. Here are a couple I use:
*p/m for margin/padding
*t/r/l/b for top/right/left/bottom
*v/h for vertical/horizontal
*bg for background
*/

//on-scroll-fixed
/*.sticky {
  position: fixed;
  top: 0%;
  width: 100%;
  z-index: 1000;
}*/

//NAV
.active {
   background-color: $primary-purple !important;
  //color: $black !important;
  text-shadow: $white 0.1rem 0.1rem;
  
}

.wd-80{
  width: 100%;
  @include respond(tab-port) {
    width: 80%;
  }


}



//responsive-video{
  .video-container {
    overflow: hidden;
    position: relative;
    width:100%;
    &::after {
        padding-top: 56.25%;
        display: block;
        content: '';
    }
    iframe {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }

}


//responsive-image{
.full-screen-image {
  height: auto !important;
  width: 100% !important;
  @include respond(tab-land) {
    width: auto !important;
    height: 100% !important;
  }
  
}



//flex-direction-reverse
.flex-reverse-column {
  @include respond(b-phone) {
    flex-direction: column-reverse;
  }
}

.p-intro::first-letter{
  font-size: 10rem;
  display: block;
  float: left;
  line-height: 0.5;
  margin: 1.5rem 1.5rem 1rem 0;
}

