/*Utility classes are meant to do only one thing, and do it well. They are designed to be simple,
 composable and re-usable, allowing for easy and fast development. While a CSS system based on utility 
 classes alone is not desirable, having a set of utility classes that allow you to quickly put together 
 templates is great.

 https://blog.mariano.io/css-utility-classes-how-to-use-them-effectively-d61ee00dad2d
 
Common Use Cases
*I find utility classes really helpful for:
*Margin/padding
*Text (colors, size, styles)
*Common Background Colors
*Hiding/Showing stuff
*Display (block, inline-block)

Naming utility classes
To separate utility classes from component classes, itâ€™s good to namespace them. I use the .u- namespace.
You can also shorthand most properties for faster coding. Here are a couple I use:
*p/m for margin/padding
*t/r/l/b for top/right/left/bottom
*v/h for vertical/horizontal
*bg for background
*/

//on-scroll-fixed
.sticky {
    position: fixed;
    top: 0;
    width: 100%;
  }

//NAV
.active{
    background-color: $primary-gray !important;
    color: $black !important;
    text-shadow: $white 0.1rem 0.1rem;
    @include respond(b-phone) {
        background-color: $black;
      }
}  

//image-banner
.image-banner{
    height: 40vh;
    background-attachment: fixed;
    background-position: center center;
    background-repeat: no-repeat;
    background-size: contain;     
    @include respond(b-phone) {
        height: 60vh;
    } 
}

//responsive-video{
    .full-screen-video{
        width: 100% !important;
        min-height: 50rem;
        @include respond(tab-land) {
            min-height: 30rem;
          }
        height: auto !important;

        
    }

//responsive-image{
    .full-screen-image{
        width: 100% !important;
        height: auto !important;
       
    }

    .full-screen-image-verticale{
        height: 100% !important;
        width: auto !important;
        max-width: 30rem;

    }
    
//flex-direction-reverse
.flex-reverse-column{
    @include respond(b-phone) {
        flex-direction: column-reverse;
      }

}

